// Generated by CoffeeScript 1.8.0
var Router,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Router = (function(_super) {
  __extends(Router, _super);

  function Router() {
    return Router.__super__.constructor.apply(this, arguments);
  }

  Router.prototype.routes = {
    "": "questionSets",
    "question_sets": "questionSets",
    "question_set/:name": "questionSet",
    "question_set/:name/new": "newQuestionSet",
    "question_set/:name/edit": "editQuestionSet",
    "question_set/:name/results": "questionSetResults",
    "question_set/:name/results/:startDate/:endDate": "questionSetResults",
    "interact/:name": "interact",
    "log/:phoneNumber/:questionSet": "log",
    "analyze/:questionSet": "analyze",
    '*invalidRoute': 'showErrorPage'
  };

  Router.prototype.interact = function(name) {
    var target;
    target = document.location.hash.substring(document.location.hash.indexOf('=') + 1);
    if (!Gooseberry.interactView) {
      Gooseberry.interactView = new InteractView();
    }
    Gooseberry.interactView.name = name;
    Gooseberry.interactView.target = target;
    return Gooseberry.interactView.render();
  };

  Router.prototype.log = function(phoneNumber, questionSet) {
    return Gooseberry.view({
      name: "states",
      key: phoneNumber,
      include_docs: true,
      success: function(result) {
        var editor, json, state;
        console.log(result);
        state = (_(result.rows).find(function(result) {
          return result.value[0] === questionSet;
        })).doc;
        $("#content").html("<a href='#question_set/" + questionSet + "/results'>" + questionSet + " Results</a> <pre class='readonly' id='editor'></pre>");
        editor = ace.edit('editor');
        editor.setTheme('ace/theme/dawn');
        editor.setReadOnly(true);
        editor.getSession().setMode('ace/mode/json');
        json = state.results;
        return editor.setValue(JSON.stringify(json, null, 2));
      }
    });
  };

  Router.prototype.analyze = function(questionSet) {
    return $("#content").html("");
  };

  Router.prototype.questionSets = function() {
    if (!Gooseberry.questionSetCollectionView) {
      Gooseberry.questionSetCollectionView = new QuestionSetCollectionView();
    }
    return Gooseberry.questionSetCollectionView.render();
  };

  Router.prototype.questionSet = function(name) {
    if (!Gooseberry.questionSetView) {
      Gooseberry.questionSetView = new QuestionSetView();
    }
    return Gooseberry.questionSetView.fetchAndRender(name);
  };

  Router.prototype.newQuestionSet = function(name) {
    var questionSet;
    questionSet = new QuestionSet({
      _id: name.toUpperCase()
    });
    return questionSet.save({
      questions: []
    }, {
      success: function() {
        return Gooseberry.router.navigate("question_set/" + name + "/edit", {
          trigger: true
        });
      }
    });
  };

  Router.prototype.editQuestionSet = function(name) {
    if (!Gooseberry.questionSetEdit) {
      Gooseberry.questionSetEdit = new QuestionSetEdit();
    }
    return Gooseberry.questionSetEdit.fetchAndRender(name);
  };

  Router.prototype.questionSetResults = function(name, startDate, endDate) {
    if (startDate == null) {
      startDate = moment().subtract(1, "week").format("YYYY-MM-DD");
    }
    if (endDate == null) {
      endDate = moment().format("YYYY-MM-DD");
    }
    if (!Gooseberry.questionSetResults) {
      Gooseberry.questionSetResults = new QuestionSetResults();
    }
    Gooseberry.questionSetResults.startDate = startDate;
    Gooseberry.questionSetResults.endDate = endDate;
    Gooseberry.questionSetResults.name = name;
    return Gooseberry.questionSetResults.fetchAndRender();
  };

  Router.prototype.userLoggedIn = function(callback) {
    return User.isAuthenticated({
      success: function(user) {
        return callback.success(user);
      },
      error: function() {
        Gooseberry.loginView.callback = callback;
        return Gooseberry.loginView.render();
      }
    });
  };

  Router.prototype.csv = function(question, startDate, endDate) {
    return this.userLoggedIn({
      success: function() {
        var csvView;
        if (User.currentUser.hasRole("reports")) {
          csvView = new CsvView;
          csvView.question = question;
          csvView.startDate = endDate;
          csvView.endDate = startDate;
          return csvView.render();
        }
      }
    });
  };

  Router.prototype.showErrorPage = function() {
    return $("#content").html("No matching route");
  };

  return Router;

})(Backbone.Router);

//# sourceMappingURL=routes.js.map
