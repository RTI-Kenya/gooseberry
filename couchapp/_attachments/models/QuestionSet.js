// Generated by CoffeeScript 1.9.0
var QuestionSet, QuestionSetCollection,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

QuestionSet = (function(_super) {
  __extends(QuestionSet, _super);

  function QuestionSet() {
    this.dataIndexes = __bind(this.dataIndexes, this);
    this.dataFields = __bind(this.dataFields, this);
    this.questionStrings = __bind(this.questionStrings, this);
    this.fetchAllResults = __bind(this.fetchAllResults, this);
    this.fetchResultsForDates = __bind(this.fetchResultsForDates, this);
    this.name = __bind(this.name, this);
    return QuestionSet.__super__.constructor.apply(this, arguments);
  }

  QuestionSet.prototype.url = "/question_set";

  QuestionSet.prototype.name = function() {
    return this.id;
  };

  QuestionSet.prototype.fetchResultsForDates = function(options) {
    return Gooseberry.view({
      name: "results_by_question_set",
      startkey: [this.id, options.startDate],
      endkey: [this.id, moment(options.endDate).add(1, "day").format("YYYY-MM-DD")],
      include_docs: false,
      success: function(result) {
        this.results = result.rows;
        return options.success(this.results);
      }
    });
  };

  QuestionSet.prototype.fetchAllResults = function(options) {
    return Gooseberry.view({
      name: "results_by_question_set",
      startkey: [this.id],
      endkey: [this.id, {}],
      include_docs: false,
      success: function(result) {
        this.results = _.pluck(result.rows, "value");
        return options.success(this.results);
      }
    });
  };

  QuestionSet.prototype.questionStrings = function() {
    return _(this.get("questions")).map(function(questionData) {
      return questionData.name || questionData.text;
    });
  };

  QuestionSet.prototype.dataFields = function() {
    return ["complete", "from", "updated_at"].concat(this.questionStrings()).concat(this.get("other_data"));
  };

  QuestionSet.prototype.dataIndexes = function() {
    var _i, _ref, _results;
    return ["complete", "from", "updated_at"].concat((function() {
      _results = [];
      for (var _i = 0, _ref = this.questionStrings().length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this)).concat(this.get("other_data"));
  };

  return QuestionSet;

})(Backbone.Model);

QuestionSetCollection = (function(_super) {
  __extends(QuestionSetCollection, _super);

  function QuestionSetCollection() {
    return QuestionSetCollection.__super__.constructor.apply(this, arguments);
  }

  QuestionSetCollection.prototype.model = QuestionSet;

  QuestionSetCollection.prototype.url = "/question_set";

  QuestionSetCollection.prototype.fetch = function(options) {
    if (options == null) {
      options = {};
    }
    options["include_docs"] = true;
    return QuestionSetCollection.__super__.fetch.call(this, options);
  };

  return QuestionSetCollection;

})(Backbone.Collection);

//# sourceMappingURL=QuestionSet.js.map
